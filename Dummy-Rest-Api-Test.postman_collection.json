{
	"info": {
		"_postman_id": "4960f11a-ead2-426a-b93a-e6c1f658dc71",
		"name": "Dummy Rest Api Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22006283"
	},
	"item": [
		{
			"name": "Create User",
			"item": [
				{
					"name": "Succeeds with name and job",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userFullName = pm.environment.get(\"userFullName\");\r",
											"let userJobTitle = pm.environment.get(\"userJobTitle\");\r",
											"\r",
											"pm.test(\"User created with correct name\", function () {\r",
											"    pm.expect(response.name).to.equal(userFullName);\r",
											"});\r",
											"\r",
											"pm.test(\"User created with correct job title\", function () { \r",
											"    pm.expect(response.job).to.equal(userJobTitle);\r",
											"});\r",
											"\r",
											"pm.test(\"User name and job name are different\", function () {\r",
											"    pm.expect(response.name).to.not.equal(response.job);\r",
											"});\r",
											"\r",
											"pm.test(\"id is not null or undefined\", function () { \r",
											"    pm.expect(response.id).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is not null or undefined\", function () { \r",
											"    pm.expect(response.createdAt).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{userFullName}}\",\r\n    \"job\": \"{{userJobTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Succeeds with name only",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userFullName = pm.environment.get(\"userFullName\");\r",
											"let userJobTitle = pm.environment.get(\"userJobTitle\");\r",
											"\r",
											"pm.test(\"User created with correct name\", function () {\r",
											"    pm.expect(response.name).to.equal(userFullName);\r",
											"});\r",
											"\r",
											"pm.test(\"id is not null or undefined\", function () { \r",
											"    pm.expect(response.id).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is not null or undefined\", function () { \r",
											"    pm.expect(response.createdAt).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{userFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Succeeds with job only",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userFullName = pm.environment.get(\"userFullName\");\r",
											"let userJobTitle = pm.environment.get(\"userJobTitle\");\r",
											"\r",
											"pm.test(\"User created with correct job title\", function () { \r",
											"    pm.expect(response.job).to.equal(userJobTitle);\r",
											"});\r",
											"\r",
											"pm.test(\"id is not null or undefined\", function () { \r",
											"    pm.expect(response.id).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is not null or undefined\", function () { \r",
											"    pm.expect(response.createdAt).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"job\": \"{{userJobTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Succeeds with hobby",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userHobby = pm.variables.replaceIn(\"{{$randomBsBuzz}}\");\r",
											"pm.environment.set(\"userHobby\", userHobby);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userHobby = pm.environment.get(\"userHobby\");\r",
											"\r",
											"pm.test(\"User created with correct hobby\", function () {\r",
											"    pm.expect(response.hobby).to.equal(userHobby);\r",
											"});\r",
											"\r",
											"pm.test(\"id is not null or undefined\", function () { \r",
											"    pm.expect(response.id).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is not null or undefined\", function () { \r",
											"    pm.expect(response.createdAt).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hobby\": \"{{userHobby}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Succeeds with no body",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userHobby = pm.variables.replaceIn(\"{{$randomBsBuzz}}\");\r",
											"pm.environment.set(\"userHobby\", userHobby);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"id is not null or undefined\", function () { \r",
											"    pm.expect(response.id).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is not null or undefined\", function () { \r",
											"    pm.expect(response.createdAt).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fails with array of names",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName1 = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"let userFullName2 = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullNames\", [userFullName1, userFullName2]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Fails POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": {{userFullNames}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fails with array of jobs",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userJob1 = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"let userJob2 = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobs\", [userJob1, userJob2]);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Fails POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"job\": {{userJobs}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fails with array of hobbies",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userHobby1 = pm.variables.replaceIn(\"{{$randomBsBuzz}}\");;\r",
											"let userHobby2 = pm.variables.replaceIn(\"{{$randomBsBuzz}}\");\r",
											"pm.environment.set(\"userHobbies\", [userHobby1, userHobby2]);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Fails POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hobby\": {{userHobbies}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get User",
			"item": [
				{
					"name": "Fails for new user id",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"userId\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{userFullName}}\",\r\n    \"job\": \"{{userJobTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes support\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Succeeds for user 1",
					"item": [
						{
							"name": "Get User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = 1;\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes support\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});\r",
											"\r",
											"pm.test(\"Response data included email\", function () {\r",
											"    pm.expect(response.data.email).to.include(\"@\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response data included first name\", function () {\r",
											"    pm.expect(response.data.first_name).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response data included last name\", function () {\r",
											"    pm.expect(response.data.last_name).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response data avatar contains jpg\", function () {\r",
											"    pm.expect(response.data.avatar).to.include([\".jpg\"]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/1",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "List User",
			"item": [
				{
					"name": "Succeeds with list retrieval",
					"item": [
						{
							"name": "Get Uset List",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let users = response.data;\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"User list contains pages\", function () {\r",
											"    pm.expect(response.page).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User list contains users\", function () {\r",
											"    pm.expect(response.total).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User list contains tptal pages\", function () {\r",
											"    pm.expect(response.total_pages).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"support is not null or undefined\", function () { \r",
											"    pm.expect(response.support).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"no users are null or undefined\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user).to.not.be.oneOf([null, undefined]);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"no users id are null or undefined\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.id).to.not.be.oneOf([null, undefined]);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"all users emails contain @\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.email).to.contain(\"@\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"no users first name are undefined\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.first_name).to.not.be.oneOf([null, undefined]);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"no users last name are undefined\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.last_name).to.not.be.oneOf([null, undefined]);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"all users avatars .jpg\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.avatar).to.contain.oneOf([\".jpg\", \".png\", \".gif\"]);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"support url is not null or undefined\", function () { \r",
											"    pm.expect(response.support.url).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"support text is not null or undefined\", function () { \r",
											"    pm.expect(response.support.text).to.not.be.oneOf([null, undefined]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users?page=2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Fails for new user id",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let userFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
											"pm.environment.set(\"userFullName\", userFullName);\r",
											"let userJobTitle = pm.variables.replaceIn(\"{{$randomJobTitle}}\");\r",
											"pm.environment.set(\"userJobTitle\", userJobTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"userId\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{userFullName}}\",\r\n    \"job\": \"{{userJobTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deleted User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes support\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fails for deleting user not in list",
					"item": [
						{
							"name": "Get User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes support\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deleted User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = pm.environment.get(\"userId\");\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response includes support\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/{{userId}}",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fails for user removed from list",
					"item": [
						{
							"name": "Get User Pre Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let userId = 1;\r",
											"\r",
											"pm.test(\"Response includes data\", function () {\r",
											"    pm.expect(response.data).to.not.be.oneOf([null, undefined]);\r",
											"});\r",
											"\r",
											"pm.test(\"User Id matches expected Id\", function () { \r",
											"    pm.expect(response.data.id).to.equal(userId);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/1",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/1",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User List Post Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"let users = response.data;\r",
											"let userId = 1;\r",
											"\r",
											"pm.test(\"no users id are 1\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.id).to.not.equal(userId);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}